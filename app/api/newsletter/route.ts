import { type NextRequest, NextResponse } from "next/server"
import { supabase } from "@/lib/supabase"
import { EmailService } from "@/lib/email-service"
import type { Newsletter } from "@/lib/supabase"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { email, firstName, lastName, source = "website" } = body

    // Validation des donn√©es
    if (!email || !email.includes("@")) {
      return NextResponse.json({ error: "Adresse email invalide" }, { status: 400 })
    }

    // V√©rifier si l'email existe d√©j√†
    const { data: existingSubscriber, error: checkError } = await supabase
      .from("newsletters")
      .select("*")
      .eq("email", email)
      .single()

    if (checkError && checkError.code !== "PGRST116") {
      console.error("Erreur v√©rification email:", checkError)
      return NextResponse.json({ error: "Erreur lors de la v√©rification" }, { status: 500 })
    }

    // Si l'email existe d√©j√†
    if (existingSubscriber) {
      if (existingSubscriber.status === "unsubscribed") {
        // R√©activer l'abonnement
        const { error: updateError } = await supabase
          .from("newsletters")
          .update({
            status: "active",
            first_name: firstName || existingSubscriber.first_name,
            last_name: lastName || existingSubscriber.last_name,
            updated_at: new Date().toISOString(),
          })
          .eq("email", email)

        if (updateError) {
          console.error("Erreur r√©activation:", updateError)
          return NextResponse.json({ error: "Erreur lors de la r√©activation" }, { status: 500 })
        }

        return NextResponse.json({
          success: true,
          message: "Abonnement r√©activ√© avec succ√®s !",
          reactivated: true,
        })
      } else {
        return NextResponse.json({
          success: true,
          message: "Vous √™tes d√©j√† abonn√©(e) √† notre newsletter !",
          alreadySubscribed: true,
        })
      }
    }

    // Cr√©er un nouvel abonnement
    const newsletterData: Newsletter = {
      email,
      first_name: firstName,
      last_name: lastName,
      source,
      status: "active",
    }

    const { data, error } = await supabase.from("newsletters").insert([newsletterData]).select().single()

    if (error) {
      console.error("Erreur insertion newsletter:", error)
      return NextResponse.json({ error: "Erreur lors de l'inscription" }, { status: 500 })
    }

    // Envoyer l'email de bienvenue
    try {
      await EmailService.sendEmail({
        to: email,
        subject: "üéâ Bienvenue dans la communaut√© K-Venture !",
        html: EmailService.getWelcomeNewsletterTemplate(firstName),
      })
    } catch (emailError) {
      console.error("Erreur envoi email bienvenue:", emailError)
      // Ne pas faire √©chouer l'inscription si l'email ne part pas
    }

    return NextResponse.json({
      success: true,
      message: "Inscription r√©ussie ! V√©rifiez votre bo√Æte mail.",
      data,
    })
  } catch (error) {
    console.error("Erreur API newsletter:", error)
    return NextResponse.json({ error: "Erreur interne du serveur" }, { status: 500 })
  }
}

// Endpoint pour se d√©sabonner
export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const email = searchParams.get("email")

    if (!email) {
      return NextResponse.json({ error: "Email requis" }, { status: 400 })
    }

    const { error } = await supabase
      .from("newsletters")
      .update({ status: "unsubscribed", updated_at: new Date().toISOString() })
      .eq("email", email)

    if (error) {
      console.error("Erreur d√©sabonnement:", error)
      return NextResponse.json({ error: "Erreur lors du d√©sabonnement" }, { status: 500 })
    }

    return NextResponse.json({
      success: true,
      message: "D√©sabonnement effectu√© avec succ√®s",
    })
  } catch (error) {
    console.error("Erreur API d√©sabonnement:", error)
    return NextResponse.json({ error: "Erreur interne du serveur" }, { status: 500 })
  }
}
